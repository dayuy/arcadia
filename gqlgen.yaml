# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - apiserver/graph/schema/*.graphqls

# Where should the generated server code go?
exec:
  filename: apiserver/graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: apiserver/graph/generated/models_gen.go
  package: generated

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: apiserver/graph/impl
  package: impl
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  # omit_template_comment: false

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to omit Is<Name>() methods to interface and unions
# omit_interface_checks : true

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: false

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
# omit_gqlgen_version_in_file_notice: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
struct_fields_always_pointers: false

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: false

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/00/gqlgen-todos/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  DatasourceQuery:
    fields:
      getDatasource:
        resolver: true
      listDatasources:
        resolver: true
      checkDatasource:
        resolver: true
  DatasourceMutation:
    fields:
      createDatasource:
        resolver: true
      updateDatasource:
        resolver: true
      deleteDatasources:
        resolver: true
  ModelQuery:
    fields:
      getModel:
        resolver: true
      listModels:
        resolver: true
  ModelMutation:
    fields:
      createModel:
        resolver: true
      updateModel:
        resolver: true
      deleteModels:
        resolver: true
  Model:
    fields:
      files:
        resolver: true
  EmbedderQuery:
    fields:
      getEmbedder:
        resolver: true
      listEmbedders:
        resolver: true
  EmbedderMutation:
    fields:
      createEmbedder:
        resolver: true
      updateEmbedder:
        resolver: true
      deleteEmbedders:
        resolver: true
  KnowledgeBaseMutation:
    fields:
      createKnowledgeBase:
        resolver: true
      updateKnowledgeBase:
        resolver: true
      deleteKnowledgeBase:
        resolver: true
  KnowledgeBaseQuery:
    fields:
      getKnowledgeBase:
        resolver: true
      listKnowledgeBases:
        resolver: true
  DataProcessQuery:
    fields:
      allDataProcessListByPage:
        resolver: true
      allDataProcessListByCount:
        resolver: true
      dataProcessSupportType:
        resolver: true
      dataProcessDetails:
        resolver: true
      checkDataProcessTaskName:
        resolver: true
      getLogInfo:
        resolver: true
      dataProcessLogInfoByFileName:
        resolver: true
      dataProcessRetry:
        resolver: true
  DataProcessMutation:
    fields:
      createDataProcessTask:
        resolver: true
      deleteDataProcessTask:
        resolver: true
  DatasetQuery:
    fields:
      getDataset:
        resolver: true
      listDatasets:
        resolver: true
  DatasetMutation:
    fields:
      createDataset:
        resolver: true
      updateDataset:
        resolver: true
      deleteDatasets:
        resolver: true
  Dataset:
    fields:
      versions:
        resolver: true
  VersionedDatasetQuery:
    fields:
      getVersionedDataset:
        resolver: true
      listVersionedDatasets:
        resolver: true
  VersionedDatasetMutation:
    fields:
      createVersionedDataset:
        resolver: true
      updateVersionedDataset:
        resolver: true
      deleteVersionedDatasets:
        resolver: true
  VersionedDataset:
    fields:
      files:
        resolver: true
  WorkerQuery:
    fields:
      getWorker:
        resolver: true
      listWorkers:
        resolver: true
  WorkerMutation:
    fields:
      createWorker:
        resolver: true
      updateWorker:
        resolver: true
      deleteWorkers:
        resolver: true
  ApplicationMutation:
    fields:
      createApplication:
        resolver: true
      updateApplication:
        resolver: true
      deleteApplication:
        resolver: true
      updateApplicationConfig:
        resolver: true
  ApplicationQuery:
    fields:
      getApplication:
        resolver: true
      listApplicationMetadata:
        resolver: true
  LLMQuery:
    fields:
      getLLM:
        resolver: true
      listLLMs:
        resolver: true
  ModelServiceMutation:
    fields:
      createModelService:
        resolver: true
      updateModelService:
        resolver: true
      deleteModelService:
        resolver: true
  ModelServiceQuery:
    fields:
      getModelService:
        resolver: true
      listModelServices:
        resolver: true
      checkModelService:
        resolver: true
  RayClusterQuery:
    fields:
      listRayClusters:
        resolver: true
  RAG:
    fields:
      application:
        resolver: true
      datasets:
        resolver: true
      judgeLLM:
        resolver: true
      metrics:
        resolver: true
  RAGMutation:
    fields:
      createRAG:
        resolver: true
      updateRAG:
        resolver: true
      deleteRAG:
        resolver: true
      duplicateRAG:
        resolver: true
  RAGQuery:
    fields:
      getRAG:
        resolver: true
      listRAG:
        resolver: true
  GPTQuery:
    fields:
      getGPT:
        resolver: true
      listGPT:
        resolver: true
